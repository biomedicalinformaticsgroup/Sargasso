#!/usr/bin/env bash

set -o nounset
set -o errexit
set -o xtrace

function listFiles {
    FILES=$@
    
    DELIMITER=","
    OUTPUT=$(ls -1 $FILES | tr '\n' "${DELIMITER}")
    echo ${OUTPUT%$DELIMITER}   
}

function star_se_reads {
    SAMPLE=$1
    SPECIES=$2
    INDEX_DIR=$3
    NUM_THREADS=$4
    READ_FILES=$5
    OUTPUT_DIR=$6
    STAR_EXECUTABLE=$7

    ID=${SAMPLE}.${SPECIES}
    STAR_TMP=${ID}.tmp
    mkdir $STAR_TMP

    ${STAR_EXECUTABLE} --runThreadN ${NUM_THREADS} --genomeDir ${INDEX_DIR} --readFilesIn ${READ_FILES} --outFileNamePrefix ${STAR_TMP}/star --outSAMstrandField intronMotif --outSAMtype BAM Unsorted --readFilesCommand zcat --outFilterMultimapScoreRange 0 --outFilterMultimapNmax 10000

    mv $STAR_TMP/starAligned.out.bam ${OUTPUT_DIR}/${ID}.bam
    mv $STAR_TMP/starLog.final.out ${OUTPUT_DIR}/${ID}.log.out
    
    rm -rf $STAR_TMP
}

function star_pe_reads {
    SAMPLE=$1
    SPECIES=$2
    INDEX_DIR=$3
    NUM_THREADS=$4
    READ_1_FILES=$5
    READ_2_FILES=$6
    OUTPUT_DIR=$7
    STAR_EXECUTABLE=$8

    ID=${SAMPLE}.${SPECIES}
    STAR_TMP=${ID}.tmp
    mkdir $STAR_TMP

    ${STAR_EXECUTABLE} --runThreadN ${NUM_THREADS} --genomeDir ${INDEX_DIR} --readFilesIn ${READ_1_FILES} ${READ_2_FILES} --outFileNamePrefix ${STAR_TMP}/star --outSAMstrandField intronMotif --outSAMtype BAM Unsorted --readFilesCommand zcat --outFilterMultimapScoreRange 0 --outFilterMultimapNmax 10000

    mv $STAR_TMP/starAligned.out.bam ${OUTPUT_DIR}/${ID}.bam
    mv $STAR_TMP/starLog.final.out ${OUTPUT_DIR}/${ID}.log.out
    
    rm -rf $STAR_TMP
}

SPECIES=$1
SAMPLES=$2
STAR_INDICES_DIR=$3
NUM_THREADS=$4
INPUT_DIR=$5
OUTPUT_DIR=$6
READS_TYPE=$7
STAR_EXECUTABLE=$8

MAX_MEM=$(cat /proc/meminfo | grep 'MemTotal'| awk '{print int($2/(1024^2))}')
ALLOW_MEM=$(echo ${MAX_MEM} | awk '{print int($1 * 0.8)}')
MAX_CORES=$(cat /proc/cpuinfo | grep processor | wc -l)
ALLOW_CORES=$(echo ${MAX_CORES} | awk '{print int($1 * 0.8)}')
#WAIT_FOR_PIDS=""
#NUM_THREADS=2
CORES_USING=0
MEM_USING=0
for species in ${SPECIES}; do
    for sample in ${SAMPLES}; do

        sample_dir=${INPUT_DIR}/${sample}
        sample_reads_1_dir=${sample_dir}/reads_1
        sample_reads_2_dir=${sample_dir}/reads_2

        if [[ "${READS_TYPE}" == "single" ]]; then
            star_se_reads ${sample} ${species} ${STAR_INDICES_DIR}/${species} ${NUM_THREADS} $(listFiles ${sample_reads_1_dir}/*) ${OUTPUT_DIR} ${STAR_EXECUTABLE} &
        else
            star_pe_reads ${sample} ${species} ${STAR_INDICES_DIR}/${species} ${NUM_THREADS} $(listFiles ${sample_reads_1_dir}/*) $(listFiles ${sample_reads_2_dir}/*) ${OUTPUT_DIR} ${STAR_EXECUTABLE} &
        fi
#        WAIT_FOR_PIDS="${WAIT_FOR_PIDS} $!"
        CORE_USING=$((${CORES_USING}+${NUM_THREADS}))
        MEM_USING=$((${MEM_USING}+30))

        if [ "$(($CORES_USING))" -gt "${ALLOW_CORES}"  ] || [ "${MEM_USING}" -gt "${ALLOW_MEM}" ] ; then

            echo "server busy, waiting for jobs: $(jobs -p) "
            wait $(jobs -p)
            CORES_USING=0
            MEM_USING=0
        fi
    done
done
wait $(jobs -p)
